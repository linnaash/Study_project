# Используем базовый образ с платформой .NET 6.0 для запуска приложения
FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base

# Открываем порт 80 для доступа к веб-приложению
EXPOSE 80

# Устанавливаем переменную среды для указания URL, на котором будет доступно приложение
ENV ASPNETCORE_URLS=http://+:80

# Если нужно, чтобы при работе веб-приложения отображалась страница Swagger
ENV ASPNETCORE_ENVIRONMENT=Development

# Устанавливаем рабочую директорию, где будет размещаться приложение
WORKDIR /app

# Используем образ с .NET SDK 6.0 для сборки приложения
FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build

# Устанавливаем рабочую папку, где будет происходить сборка проекта
WORKDIR /Cultura

# Копируем файлы проекта и зависимостей в контейнер
COPY ["Cultura/Cultura-Test.csproj", "Cultura/"]
COPY ["BusinessLogic/BusinessLogic.csproj", "BusinessLogic/"]
COPY ["Domain/Domain.csproj", "Domain/"]
COPY ["DataAccess/DataAccess.csproj", "DataAccess/"]

# Выполняем восстановление зависимостей (nuget-пакетов) для проекта
RUN dotnet restore "Cultura/Cultura-Test.csproj"

# Копируем все исходные файлы в контейнер
COPY . .

# Публикуем проект в папку /app/publish
FROM build AS publish
RUN dotnet publish "Cultura/Cultura-Test.csproj" -c Release -o /app/publish /p:UseAppHost=false

# Используем базовый образ для запуска уже собранного приложения
FROM base AS final

# Устанавливаем рабочую директорию для конечного запуска приложения
WORKDIR /app

# Копируем результаты сборки (опубликованное приложение) из этапа publish в рабочую директорию
COPY --from=publish /app/publish .

# Определяем точку входа в приложение - запускаем его с помощью команды dotnet и указанием dll-файла
ENTRYPOINT ["dotnet", "Cultura-Test.dll"]
